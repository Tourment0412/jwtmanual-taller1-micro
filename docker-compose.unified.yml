services:
  # Nombre del servicio dentro del archivo de Docker Compose
  rabbitmq:
    # Imagen de RabbitMQ con el plugin de panel de administración incluido
    image: rabbitmq:3-management
    # Nombre fijo del contenedor para referenciarlo fácilmente desde otros servicios o comandos
    container_name: rabbitmq
    # Configuración de usuario para Podman
    user: "999:999"
    # Mapeo de puertos del host al contenedor
    ports:
      # Puerto AMQP (host:contenedor) usado por los clientes (app/worker/orquestador)
      - "5672:5672"
      # Puerto de la consola web de administración (http://localhost:15672)
      - "15672:15672"
    # Variables de entorno para inicializar usuario/vhost por defecto
    environment:
      # Usuario administrador inicial del broker
      RABBITMQ_DEFAULT_USER: admin
      # Contraseña del usuario administrador
      RABBITMQ_DEFAULT_PASS: admin_pass
      # Virtual host por defecto donde se crean exchanges/colas/bindings
      RABBITMQ_DEFAULT_VHOST: foro
    # Comprobación de salud para esperar a que RabbitMQ esté listo antes de depender de él
    healthcheck:
      # Diagnóstico oficial que valida conectividad de puertos internos del broker
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      # Intervalo entre chequeos de salud
      interval: 10s
      # Tiempo máximo permitido por cada chequeo
      timeout: 5s
      # Número de reintentos antes de marcar el servicio como unhealthy
      retries: 5
      # Tiempo de gracia inicial antes de comenzar a chequear (útil para el arranque)
      start_period: 30s
    # Montaje de archivos de configuración/definiciones usando bind mounts con permisos correctos
    volumes:
      # rabbitmq.conf: configuración del broker (listeners, vhosts, políticas, etc.)
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro,Z
      # definitions.json: usuarios, vhosts, exchanges, colas y bindings predefinidos
      - ./definitions.json:/etc/rabbitmq/definitions.json:ro,Z
    networks:
      observability:
        aliases:
          - postgres_notifications
          - postgres-notifications



  postgres_notifications:
    image: postgres:16-alpine
    container_name: postgres-notifications
    environment:
      POSTGRES_DB: notifications
      POSTGRES_USER: notifications
      POSTGRES_PASSWORD: notifications
    ports:
      - "5432:5432"
    volumes:
      - pgdata_notifications:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notifications -d notifications"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - observability

  postgres_domain:
    image: postgres:16-alpine
    container_name: postgres-domain
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "5433:5432"
    volumes:
      - pgdata_domain:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - observability

  notifications-api:
    build:
      context: ../notifications-service-micro
    container_name: notifications-service-micro
    env_file:
      - .env
    environment:
      TZ: America/Bogota
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: orchestrator_user
      RABBITMQ_PASSWORD: orch_pass
      AMQP_EXCHANGE: orquestador.events
      AMQP_EXCHANGE_TYPE: topic
      MESSAGING_DECLARE_INFRA: "false"
      DB_URL: postgresql+psycopg2://notifications:notifications@postgres_notifications:5432/notifications
      ENV: dev
      STACK: logging
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_notifications:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - observability
    logging:
      driver: k8s-file

  notifications-worker:
    build: ../notifications-service-micro
    container_name: notifications-worker
    command: python -m app.worker
    env_file:
      - .env
    environment:
      - TZ=America/Bogota
      - ENV=dev
      - STACK=logging
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_notifications:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - observability
    logging:
      driver: k8s-file

  notifications-scheduler:
    build: ../notifications-service-micro
    container_name: notifications-scheduler
    command: python -m app.scheduler
    env_file:
      - .env
    environment:
      - TZ=America/Bogota
      - ENV=dev
      - STACK=logging
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - observability
    logging:
      driver: k8s-file

  domain-service:
    build:
      context: .
    container_name: jwtmanual-taller1-micro
    ports:
      - "8081:8080"
    environment:
      TZ: America/Bogota
      DOCKER_COMPOSE_ENABLED: "true"
      DATASOURCE_URL: jdbc:postgresql://postgres-domain:5432/mydb
      DATASOURCE_USERNAME: user
      DATASOURCE_PASSWORD: pass
      FLYWAY_ENABLED: "false"
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      HIBERNATE_SQL_LOG: INFO
      HIBERNATE_BINDER_LOG: INFO
      APP_LOG_LEVEL: INFO
      JWT_SECRET: secretsecretsecretsecretsecretsecretsecretsecretsecret
      JWT_EXPIRATION: "3600"
      JWT_ISSUER: ingesis.uniquindio.edu.co
      # RabbitMQ
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: orchestrator_user
      SPRING_RABBITMQ_PASSWORD: orch_pass
      SPRING_RABBITMQ_VIRTUAL_HOST: foro
      # Depuracion y confirms de publicacion
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_AMQP: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_RABBIT: DEBUG
      SPRING_RABBITMQ_PUBLISHER_CONFIRM_TYPE: simple
      SPRING_RABBITMQ_PUBLISHER_RETURNS: "true"
      ENV: dev
      STACK: logging
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_domain:
        condition: service_healthy
    networks:
      - observability
    logging:
      driver: k8s-file

  orchestrator-db:
    image: postgres:16-alpine
    container_name: postgres-orchestrator
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "5434:5432"
    volumes:
      - pgdata_orchestrator:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - observability

  orchestrator-service:
    build:
      context: ../orquestador-solicitudes-micro
    container_name: orquestador-solicitudes-micro
    depends_on:
      rabbitmq:
        condition: service_healthy
      orchestrator-db:
        condition: service_healthy
    environment:
      TZ: America/Bogota
      PORT: 3000
      DATABASE_URL: postgresql://user:pass@postgres-orchestrator:5432/mydb?schema=public
      RABBITMQ_URL: amqp://orchestrator_user:orch_pass@rabbitmq:5672/foro
      ENV: dev
      STACK: logging
    ports:
      - "3001:3000"
    networks:
      - observability
    logging:
      driver: k8s-file

  automation-tests:
    build:
      context: ../automation-tests
    container_name: automation-tests
    environment:
      - AUT_TESTS_BASE_URL=http://domain-service:8080
    depends_on:
      - domain-service
    networks:
      - ci_cd_network
      - observability

  jenkins:
    build: ../cicdjenkins/jenkins
    container_name: jenkins
    ports:
      - "8083:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      # Cache .m2 usando volumen nombrado para evitar problemas de permisos
      - jenkins_m2:/var/jenkins_home/.m2
    environment:
      - CASC_JENKINS_CONFIG=/usr/share/jenkins/ref/casc_configs/jenkins.yaml
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
      - SONAR_AUTH_TOKEN=admin123456789
      - SONAR_HOST_URL=http://sonarqube:9000
      # Configuración para TestContainers - deshabilitar Docker
      - TESTCONTAINERS_RYUK_DISABLED=true
      - TESTCONTAINERS_CHECKS_DISABLE=true
    depends_on:
      sonar:
        condition: service_healthy

  sonar:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9001:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://postgres-sonar:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      - SONAR_WEB_JAVAADDITIONALOPTS=-Xmx1024m -Xms512m
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    user: "1000:1000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      postgres-sonar:
        condition: service_healthy
    networks:
      - observability

  postgres-sonar:
    image: postgres:15
    container_name: postgres-sonar
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresql:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar -d sonar"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - observability

  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: -config.file=/etc/loki/config/loki-config.yml
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ../observability/loki/config:/etc/loki/config:ro,Z
    networks:
      - observability
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 20s
      timeout: 3s
      retries: 10

  fluentd:
    build:
      context: ../observability/fluentd
      dockerfile: Dockerfile
    container_name: fluentd
    user: "0:0"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ../observability/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - /var/log/journal:/var/log/journal:ro
      - /run/log/journal:/run/log/journal:ro
      - /run/user/1000/journal:/run/user/1000/journal:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /home/miguel/.local/share/containers:/host/containers:ro
    security_opt:
      - label=disable
    environment:
      - FLUENTD_PROMETHEUS=true
      - FLUENTD_PROMETHEUS_PORT=24231
    depends_on:
      - loki
    networks:
      - observability
    group_add:
      - "190"

  grafana:
    image: grafana/grafana:10.4.5
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ../observability/grafana/provisioning:/etc/grafana/provisioning:ro,Z
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - loki
    networks:
      - observability

volumes:
  pgdata_notifications:
  pgdata_domain:
  pgdata_orchestrator:
  jenkins_home:
  jenkins_m2:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  loki-data:
  grafana-data:

# Root network definition to satisfy services referencing 'ci_cd_network'
networks:
  ci_cd_network:
    name: ci_cd_network
    driver: bridge
  observability:
    driver: bridge



